import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import javax.swing.JButton;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author athar
 */
public class tictactoeUI extends javax.swing.JFrame implements ActionListener {

    /**
     * Creates new form tictactoeUI
     */
    int totalMoves = 0;
    int[] board = {1,1,1,1,1,1,1,1,1};
    Integer[] moves = {0,1,2,3,4,5,6,7,8};
    boolean pwin = false;
    boolean cwin = false;
    boolean gameMode = true;
    boolean turn = true;
    JButton []buttons = new JButton[9];
    
    public tictactoeUI() {
        initComponents();
        
        for(int i=0; i<9; i++){
            buttons[i] = new JButton();
            buttons[i].setBackground(new java.awt.Color(255, 255, 255));
            buttons[i].setFont(new java.awt.Font("Arial", 1, 18));
            buttons[i].setFocusable(false);
            buttons[i].setEnabled(false);
            buttons[i].addActionListener(this);
            buttons[i].putClientProperty("idx", i);
            jPanel2.add(buttons[i]);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        titleLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        startPlayer = new javax.swing.JButton();
        startComp = new javax.swing.JButton();
        statusBar = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setMinimumSize(new java.awt.Dimension(400, 375));
        setPreferredSize(new java.awt.Dimension(400, 375));
        setSize(new java.awt.Dimension(0, 0));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        titleLabel.setFont(new java.awt.Font("Comic Sans MS", 1, 24)); // NOI18N
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setLabelFor(jPanel1);
        titleLabel.setText("Tic-Tac-Toe");
        titleLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(125, 125, 125)
                .addComponent(titleLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(titleLabel)
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setLayout(new java.awt.GridLayout(3, 3));

        startPlayer.setBackground(new java.awt.Color(255, 255, 255));
        startPlayer.setFont(new java.awt.Font("Comic Sans MS", 0, 11)); // NOI18N
        startPlayer.setText("Start vs Player");
        startPlayer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                startPlayerMouseClicked(evt);
            }
        });

        startComp.setBackground(new java.awt.Color(255, 255, 255));
        startComp.setFont(new java.awt.Font("Comic Sans MS", 0, 11)); // NOI18N
        startComp.setText("Start vs Comp");
        startComp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                startCompMouseClicked(evt);
            }
        });

        statusBar.setBackground(new java.awt.Color(255, 255, 255));
        statusBar.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        statusBar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 67, Short.MAX_VALUE)
                        .addComponent(startPlayer)
                        .addGap(28, 28, 28)
                        .addComponent(startComp)
                        .addGap(75, 75, 75))))
            .addGroup(layout.createSequentialGroup()
                .addGap(144, 144, 144)
                .addComponent(statusBar)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startPlayer)
                    .addComponent(startComp))
                .addGap(18, 18, 18)
                .addComponent(statusBar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startPlayerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_startPlayerMouseClicked
        init();
        gameMode = true;
        turn = true;
    }//GEN-LAST:event_startPlayerMouseClicked

    private void startCompMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_startCompMouseClicked
        init();
        gameMode = false;
        statusBar.setText("X turn!");
    }//GEN-LAST:event_startCompMouseClicked

    public void init(){
        for(int i=0; i<9; i++){
            buttons[i].setText("");
            buttons[i].setEnabled(true);
            buttons[i].setBackground(new java.awt.Color(255, 255, 255));
            board[i] = 1;
        }
        totalMoves = 0;
        pwin = false;
        cwin = false;
    }
    
    @Override
    public void actionPerformed(ActionEvent e){
        JButton b1 = (JButton) e.getSource();
        int index = (int) b1.getClientProperty("idx");
        
        if(totalMoves <=9 && !(pwin || cwin)){
            //b1.setEnabled(false);
            if(!gameMode){
                b1.setText("X");
                board[index] = 2;
                statusBar.setText("O Turn!");
            }
            else{
                b1.setText((turn ? "X" : "O"));
                board[index] = (turn ? 2 : 3);
                turn = !turn;
            }
            totalMoves++;
            
            if(totalMoves >= 5){
                int score = eval(true);
                if(score == -10)
                    cwin = true;
                else if(score == 10)
                    pwin = true;
            }
            
            if(!gameMode && !pwin && totalMoves <= 9){
                pcMove();
                totalMoves++;
            }
        }
        
        if(pwin){
            String s = "Player " + (gameMode ? "1 " : "") + "Wins!";
            statusBar.setText(s);
        }
        else if(cwin){
            String s = (gameMode ? "Player 2" : "Computer") + " Wins!";
            statusBar.setText(s);
        }
        else if(totalMoves >= 9){
            statusBar.setText("DRAW!");
        }
    }
    
    public void pcMove(){
        int min_score = 999;
        int box_no = 99;

        List<Integer> intList = Arrays.asList(moves);
        Collections.shuffle(intList);
        intList.toArray(moves);

        for(int i : moves){
            if(board[i] == 1){
                board[i] = 3;
                int score = minimax(totalMoves+1, true);
                board[i] = 1;

                if(score < min_score){
                    box_no = i;
                    min_score = score;
                }
            }
        }

        if(box_no != 99){
            board[box_no] = 3;
            buttons[box_no].setText("O");
            //buttons[box_no].setEnabled(false);
        }
        
        int check = eval(true);
        if(check == -10)
            cwin = true;
        else if(check == 10)
            pwin = true;
    }

    public int minimax(int depth, boolean MaxPlayer){
        int value = eval(false);
        if(value == 10) return 10;
        else if(value == -10) return -10;

        if(depth == 9)
            return value;

        if(MaxPlayer){
            int score = -999;

            for(int i : moves){
                if(board[i] == 1){
                    board[i] = 2;
                    score = Math.max(score, minimax(depth+1, false));
                    board[i] = 1;
                }
            }

            return score;
        }
        else{
            int score = 999;

            for(int i : moves){
                if(board[i] == 1){
                    board[i] = 3;
                    score = Math.min(score, minimax(depth+1, true));
                    board[i] = 1;
                }
            }

            return score;
        }
    }

    /**
     *
     * @param flag
     * @return
     */
    public int eval(boolean flag){
        int x;
        //row
        for(int i=0; i<7; i += 3){
            x = board[i] * board[i+1] * board[i+2];
            if(x == 27){
                if(flag){
                    buttons[i].setBackground(new java.awt.Color(144, 238, 144));
                    buttons[i+1].setBackground(new java.awt.Color(144, 238, 144));
                    buttons[i+2].setBackground(new java.awt.Color(144, 238, 144));
                }
                return -10;
            }
            else if(x == 8){
                if(flag){
                    buttons[i].setBackground(new java.awt.Color(144, 238, 144));
                    buttons[i+1].setBackground(new java.awt.Color(144, 238, 144));
                    buttons[i+2].setBackground(new java.awt.Color(144, 238, 144));
                }
                return 10;
            }
        }

        //column
        for(int i=0; i<3; i++){
            x = board[i] * board[i+3] * board[i+6];
            if(x == 27){
                if(flag){
                    buttons[i].setBackground(new java.awt.Color(144, 238, 144));
                    buttons[i+3].setBackground(new java.awt.Color(144, 238, 144));
                    buttons[i+6].setBackground(new java.awt.Color(144, 238, 144));
                }
                return -10;
            }
            else if(x == 8){
                if(flag){
                    buttons[i].setBackground(new java.awt.Color(144, 238, 144));
                    buttons[i+3].setBackground(new java.awt.Color(144, 238, 144));
                    buttons[i+6].setBackground(new java.awt.Color(144, 238, 144));
                }
                return 10;
            }
        }

        //diagonal
        x = board[0] * board[4] * board[8];
        if(x == 27){
            if(flag){
                buttons[0].setBackground(new java.awt.Color(144, 238, 144));
                buttons[4].setBackground(new java.awt.Color(144, 238, 144));
                buttons[8].setBackground(new java.awt.Color(144, 238, 144));
            }
            return -10;
        }
        else if(x == 8){
            if(flag){
                buttons[0].setBackground(new java.awt.Color(144, 238, 144));
                buttons[4].setBackground(new java.awt.Color(144, 238, 144));
                buttons[8].setBackground(new java.awt.Color(144, 238, 144));
            }
            return 10;
        }

        x = board[2] * board[4] * board[6];
        if(x == 27){
            if(flag){
                buttons[2].setBackground(new java.awt.Color(144, 238, 144));
                buttons[4].setBackground(new java.awt.Color(144, 238, 144));
                buttons[6].setBackground(new java.awt.Color(144, 238, 144));
            }
            return -10;
        }
        else if(x == 8){
            if(flag){
                buttons[2].setBackground(new java.awt.Color(144, 238, 144));
                buttons[4].setBackground(new java.awt.Color(144, 238, 144));
                buttons[6].setBackground(new java.awt.Color(144, 238, 144));
            }
            return 10;
        }

        return 0;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(tictactoeUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(tictactoeUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(tictactoeUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(tictactoeUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new tictactoeUI().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton startComp;
    private javax.swing.JButton startPlayer;
    private javax.swing.JLabel statusBar;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables
}
